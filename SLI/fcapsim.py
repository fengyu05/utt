#!/usr/bin/python
# Small size experiment of fcap online simulation for supply forecasting
# go/fcapsim

import math
import random
import sys
import os
import scipy

GRANULARITY_SIZE = 1 
options = {}

INMAIL_KEY = 'inmail'
INMAIL_KEY_10 = 'inmail1'
INMAIL_KEY_20 = 'inmail2'
INMAIL_KEY_30 = 'inmail3'
INMAIL_KEY_40 = 'inmail4'
INMAIL_KEY_50 = 'inmail5'
INMAIL_KEY_60 = 'inmail6'
DTAG_KEY = 'dtag'

PVTS_KEY = 'pvts'
CAPPED_PVTS_KEY = 'cappvts'
UNIQUE_PVTS_KEY = 'uniquePV'

MU_KEY = 'mu'
SESSION_MU_KEY = 'ses_mu'
SIGMASQ_KEY = 'sigmasq'
SESSION_SIGMASQ_KEY = 'ses_sq'
N_KEY = 'N'

FCAP_KEY = 'fcap'


def dprint(*args, **kwargs):
  if options.mute:
    return
  print(args)


def mergeMatrixToTimeSerials(PV):
  PV_TS = [0] * len(PV[0])

  for i in xrange(len(PV)):
    for j in xrange(len(PV[0])):
      PV_TS[j] += PV[i][j]

  return PV_TS

def drawLambda(mu, sigma):
  return random.lognormvariate(mu, sigma)

def generateDeltaT(lamb):
  return - math.log(random.random()) / lamb

def restoreLambdaTsFromPvTs(PvTs, barLambda):
  '''
  Restore lambda time series given page view time series and barLambda across long time period
  Design: go/fcapsim
  Ex:
  PvTs: [3,2,1,2,2]
  barLambda: 0.5
  return lambdaTs: [0.33333333333333331, 0.5, 1.0, 0.5, 0.5]
  '''
  lambdaTs = []
  sumPV = sum(PvTs)
  for pv in PvTs:
    lambdaTs.append(1.0 * barLambda * len(PvTs) * pv / sumPV)
  return lambdaTs

def dramLambdaTs(mu, sigmasq, PvTs):
  lambdaTs = []
  sumPV = sum(PvTs)
  for pv in PvTs:
    ratio = 1.0 * len(PvTs) * pv / sumPV
    lambdaTs.append(drawLambda(ratio * mu, ratio * ratio * sigmasq ))
  return lambdaTs

def generateDeltaTimeWithinPeriod(lambdaSeries, Tn, even=False):
  '''
  Assume arrivals in a fix period is possion event given a arrival rate for that period,
  generate deltaT according to a series of arraival rate(lambda).
  For each generation, it essentially equals to the inverse function of CDF_byLambdaSeries.
  Design: go/fcapsim
  Ex:
  lambdaSeries: [0.5, 0.3, 1.1, ...], lambda bucket granularity = 1
  Tn: 7.0
  return timeSeq: [0.31, 0.64, 1.21, 1.42, 1.85, 2.62, ... 6.98]
  Complexity: O(len(lambdaSeries) * (Tn / avg(lambdaSeries)))

  '''
  lenOfSeries = len(lambdaSeries)
  if Tn > lenOfSeries:
    raise Exception('Can not generateDeltaTimeWithinPeriod, Tn is outside of lambdaSeries bucket')

  if even:
    currentTs = random.randint(0, 7)
  else:
    currentTs = 0

  timeSeq = []

  preComupteFt = precomputeFtWitLambdaSeries(lambdaSeries)

  while currentTs < Tn:
    try:
      deltaT = inverseCDF_byLambdaSeries(lambdaSeries, random.random())
      currentTs += deltaT
      if currentTs <= Tn:
        timeSeq.append(currentTs)
    except:
      pass

  return timeSeq

def precomputeFtWitLambdaSeries(lambdaSeries):
  preComupteFt = []
  for i in xrange(len(lambdaSeries)):
    preComupteFt.append(CDF_byLambdaSeries(lambdaSeries, i + 1))
  return preComupteFt


def inverseCDF_byLambdaSeries(lambdaSeries, fx, preComupteFt=None):
  '''
  Inverse function of CDF_byLambdaSeries.
  Ex:
  lambdaSeries: [0.5, 0.3, 1.1, ...], lambda bucket granularity = 1
  Fx: 3.5
  return x in [0, infinity]
  '''
  if preComupteFt == None:
    preComupteFt = precomputeFtWitLambdaSeries(lambdaSeries)

  T = len(preComupteFt)
  for i in xrange(len(preComupteFt)):
    if preComupteFt[i] >= fx:
      T = i
      break

  if T == len(preComupteFt):
    raise Exception('Can not inverse CDF_byLambdaSeries, fx is outside of lambdaSeries bucket')

  cumulative = -math.log( 1.0 - fx)
  for i in xrange(T):
    cumulative -= lambdaSeries[i]

  remainT = cumulative / lambdaSeries[T]

  x = T + remainT
  return x

def CDF_byLambdaSeries(lambdaSeries, x):
  '''
  The probility that at least a arrival during time x, given arrival rate is a timeseries, bucket by timePeriod = 1
  Ex:
  lambdaSeries: [0.5, 0.3, 1.1, ...], lambda bucket granularity = 1
  x: 3.5
  return x in [0, 1]
  '''
  floorX = int(math.floor(x))
  prod = 1.0
  for t in xrange(floorX):
    modifier = math.pow(math.e, -1.0 * lambdaSeries[t])
    assert modifier <= 1.0
    prod = prod * modifier
    #print 'modifier', modifier, prod, lambdaSeries[t]

  remainX = x - floorX
  #print 'remainX', remainX
  if remainX > 0:
    modifier = math.pow(math.e, -1.0 * remainX * lambdaSeries[floorX])
    assert modifier <= 1.0
    prod = prod * modifier
    #print 'modifier', modifier, prod, lambdaSeries[floorX]

  Fx = 1.0 - prod
  return Fx

def generateSeq(lamb, Tn):
  current = 0
  ts = []

  maxCount = 1000000
  count = 0
  while True and count < maxCount :
    count += 1
    deltaT = generateDeltaT(lamb)
    current += deltaT
    ts.append(current)
    if current >= Tn:
      break

  return ts

def bucketSeqToTs(seq, size):
  ts = [0] * size
  for s in seq:
    s = s / GRANULARITY_SIZE
    bucketIndex = int(math.floor(s))
    if bucketIndex < size:
      ts[bucketIndex] += 1

  return ts

# Fcap simulation on seq[n], FC[m] using queue
# O(nm)
def applyFcapToSeq(seq, FC):
  cappedSeq = []
  cacheQueues = []
  for fc in FC:
    cacheQueues.append([])

  for p in seq:
    # deque expire item
    for i in xrange(len(FC)):
      fc = FC[i]
      cacheQueue = cacheQueues[i]

      while len(cacheQueue) > 0:
        if cacheQueue[0] <= p - fc[1] * GRANULARITY_SIZE:
          del cacheQueue[0]
        else:
          break;

    # enqueue new item
    capped = False
    for i in xrange(len(FC)):
      fc = FC[i]
      cacheQueue = cacheQueues[i]

      if len(cacheQueue) >= fc[0]:
        capped = True
        break

    if not capped:
      cappedSeq.append(p)

      for i in xrange(len(FC)):
        fc = FC[i]
        cacheQueue = cacheQueues[i]
        cacheQueue.append(p)

  return cappedSeq

def listMultiply(l, d):
  return [ x * d for x in l]

def vectorMultiply(lista, listb):
  assert len(lista) == len(listb)
  return [a*b for a,b in zip(lista,listb)]

def vectorDivide(lista, listb):
  assert len(lista) == len(listb)
  return [1.0*a/b for a,b in zip(lista,listb)]

def applyFCRatio(ratio, ts):
  result = []
  for i in xrange(len(ts)):
    result.append(1.0 * ts[i] * ratio[i])

  return result

def tsToSeq(ts):
  seq = []

  index = 0
  for v in ts:
    for x in xrange(v):
      seq += [ (index + 1.0 * x / v) * GRANULARITY_SIZE  ]
    index += 1
  return seq

def simulatePVFC(PV, FC):
  result = []
  TsLen = len(PV[0])

  for ts in PV:
    seq = tsToSeq(ts)
    cappedSeq = applyFcapToSeq(seq, FC)
    #print cappedSeq
    cappedTs = bucketSeqToTs(cappedSeq, TsLen)

    result.append(cappedTs)

  return result

def genPV(pattern, sigma, size, repeat=1):
  PV = []
  for i in xrange(size):
    ts = []
    for j in xrange(len(pattern) * repeat):
      p = pattern[j%len(pattern)]
      ts.append(int(math.floor(random.lognormvariate(math.log(p), sigma))))
    PV.append(ts)

  return PV

def getData():
  return {
      INMAIL_KEY : {
        PVTS_KEY : [ 11588515, 14631838, 10787456, 5112175,  4452953,  5934461,  16350557, 15732956, 14916380, 12756341, 5774668,  5470035,  15535617, 18476106, 22391060, 21086134, 14035260, 5763114,  5312536,  16179606, 20992097, 16443481, 14530590, 11774737, 5570786,  5244272,  14569551, 17424873, 19268721, 18503540, 14540302, 5666633,  5185907,  17068207, 24744540, 22617672, 19608096, 15349603, 5976639,  5504879,  17252410, 19534367, 17117677, 14389516, 6353494,
          4443630,  4451469,  16567582, 20978329, 18078922, 16494845, 13729296, 5832551,  5301891,  18148398, 22228645, 22672893, 18975968, 14671225, 5986402,  5332417,  16199056, 30408503, 27956736, 23332051, 18240165, 8461137,  5406901,  18456021, 21471655, 21251488, 20883248, 15447363, 5754600,  5306457,  16371939, 20967690, 21756875, 34993754, 21508434, 5780798,  5361932,  16555237, 23564745, 24574365, 18730489, 13808560, 6621777,  5468627,  18219966, 21908323,
          22368494, 19246647, 15785319, 6273864,  5676745,  18046419, 25210215, 25271909, 22349925, 19867683, 7443372,  5712562,  17270981, 21970802, 22209211, 19486247, 17901398, 6441419,  4930345,  7675821,  19095337, 26049088, 23469291, 22287006, 11404335, 5588393,  17046352, 26513085, 24818649, 7434839],
        CAPPED_PVTS_KEY : [
          359780, 441500, 325307, 153020, 127731, 203662, 575093, 481578, 425307, 342773, 169345, 154214, 430633, 558180, 527836, 499259, 350629, 164341, 139144, 393887, 592707, 468254, 396906, 316129, 152930, 134927, 401194, 578135, 499411, 441479, 338499, 150863, 128389, 354344, 607236, 506648, 423893, 319955, 152610, 139525, 378440, 526858, 414994, 335101, 174608, 108296, 105896, 367620, 540372, 431621, 374239, 298517, 199486, 139382, 406323, 559053, 483177, 403027, 296555,
          149055, 131431, 340987, 649675, 567691, 468473, 360955, 185245, 141843, 457074, 594277, 514708, 473699, 348499, 163508, 149053, 465191, 639901, 581792, 675206, 443778, 181792, 164673, 502772, 769715, 705333, 553518, 384543, 209777, 184515, 590636, 794518, 739107, 579203, 459025, 226851, 213039, 642390, 914729, 845979, 832980, 685417, 293618, 248137, 701223, 908617, 818721, 719165, 591037, 270840, 226828, 399551, 1053203, 1093751, 916747, 811386, 461564, 324195, 890357,
          1496998, 1334469, 393910],
        UNIQUE_PVTS_KEY : [
          5426271,   6491731,   5473906,   3031993,   2678656,   3601546,   7139433,   6935725,   6488550,   5850855,   3377374,   3211425,   6609467,   7475504,   7102703,   7411334,   6142170,   3370588,   3130827,   6613529,   7761693,   7158782,   6567265,   5809767,   3257832,   3078280,   6662284,   7228795,   7134439,   6896397,   6073196,   3291151,   3005638,   6193620,   8048410,   7463478,   6958275,   6045263,   3465006,   3236296,   6536425,   7585043,   6839696,
          6056959,   3672400,   2672362,   2680433,   6460015,   7627991,   6976989,   6603494,   5854053,   3442651,   3113473,   6718211,   7800351,   7332750,   6934720,   5986219,   3493028,   3162487,   6181108,   8246816,   7992969,   7772236,   6868765,   4241191,   3201793,   6915438,   7615815,   7387837,   7256045,   6200868,   3445055,   3205873,   6892920,   7728593,   7456841,   7057149,   6198569,   3448595,   3221636,   6805944,   7949800,   7761276,   7136545,
          5858633,   3720446,   3276318,   7023440,   7885985,   7639487,   6909406,   6215670,   3702665,   3401052,   6943817,   8141877,   7895588,   7685348,   6898414,   4064456,   3425952,   6950272,   7860393,   7410881,   7099668,   6303547,   3675901,   3004424,   4146131,   7456538,   7928638,   7430850,   6855473,   4726209,   3361427,   6672435,   8347869,   7808391,   3899065
          ],
        MU_KEY : -2.3730189090593026,
        SIGMASQ_KEY :  2.616358649421281,

        SESSION_MU_KEY : -2.5824459137053695,
        SESSION_SIGMASQ_KEY:  2.396475080995998,
        N_KEY : 43400426,
        FCAP_KEY : [(1, 60)],
        },
      DTAG_KEY : {
        PVTS_KEY : [1132854, 733509, 685396, 1918895, 2186021, 1926368, 1812479, 1466612, 716674, 697512, 1907131, 2185166, 1912919, 2025166, 1577434, 730991, 708838, 1871044, 2064246, 1807987, 1766776, 1375302, 660171, 606786, 958387, 2182882, 1891791, 1813940, 362342], 
        CAPPED_PVTS_KEY : [267723, 200234, 181506, 497536, 599083, 482579, 442031, 334183, 180494, 170770, 461435, 575715, 467213, 542965, 387405, 183531, 170591, 450851, 526622, 425942, 412364, 303388, 159872, 141917, 242703, 606114, 468217, 444020, 96397],
        MU_KEY : -1.8589509502719088,
        SIGMASQ_KEY :  1.7223761543310792,
        SESSION_MU_KEY : -2.5824459137053695,
        SESSION_SIGMASQ_KEY:  2.396475080995998,
        N_KEY : 2672906,
        FCAP_KEY : [(5, 2), (10, 7)],
        },
      INMAIL_KEY_10 : {
        PVTS_KEY : [3087896, 5934145, 16349614, 15731892, 14915337, 12755507, 5774237, 5469680, 15534699, 18474965, 22389628, 21084727, 14034232, 5762565, 5312194, 16178603, 20990907, 16442560, 14529567, 11773870, 5570365, 5243983, 14568873, 17423596, 19267267, 18502354, 14539349, 5666239, 5185486, 17067256, 24742925, 22616127, 19607036, 15348629, 5976236, 5504550, 17251443, 19532937, 17116571, 14388571, 6353092, 4443316, 4451175, 16566608, 20977040, 18077775, 16493797, 13728388, 5832046,
          5301542, 18147162, 22227213, 22671472, 18974720, 14670279, 5985935, 5331972, 16198058, 30406614, 27954797, 23330337, 18238899, 8460606, 5406399, 18454545, 21470129, 21249901, 20881780, 15446337, 5754069, 5305984, 16370910, 20966245, 21755405, 34991546, 21506799, 5780172, 5361476, 16554128, 23563002, 24572586, 18729190, 13807427, 6621087, 5468134, 18218718, 21906302, 22366653, 19245400, 15784276, 6273312, 5676323, 18045065, 25208408, 25270066, 22348323, 19866274, 7442793,
          5712162, 17269934, 21969238, 22207633, 19484683, 17900263, 6440809, 4929971, 7675099, 19093483, 26047055, 23467353, 22285550, 11403307, 5587715, 17044673, 26510063, 24836204, 24861646, 23023783, 13380466, 8792674, 2030225],

        CAPPED_PVTS_KEY : [
          92198, 211864, 591501, 494541, 438861, 350555, 173597, 156526, 437954, 566451, 531255, 508729, 360941, 172401, 148641, 424380, 631448, 501596, 430552, 347102, 169914, 153747, 461132, 649815, 565065, 507412, 393947, 178201, 152125, 427107, 727259, 609298, 516590, 397715, 192107, 177855, 490393, 674238, 534255, 437905, 231047, 145179, 143451, 509346, 730473, 590442, 518623, 419211, 267574, 196973, 585312, 790195, 684139, 581763, 436237, 220962, 198949, 513551, 942761,
          815009, 685232, 539308, 275996, 212307, 690470, 870225, 752998, 696990, 523476, 244814, 224489, 704166, 938770, 848777, 991257, 662137, 270631, 247115, 761158, 1125974, 1033230, 825691, 584551, 314886, 280728, 924147, 1199262, 1112233, 883437, 714808, 352347, 334675, 1018311, 1399868, 1289525, 1256654, 1068202, 464190, 399465, 1175398, 1491249, 1340377, 1198252, 1025036, 468010, 397361, 719805, 1821864, 1898003, 1634475, 1511952, 859799, 609604, 1730551, 2725396,
          2363134, 2199246, 2096923, 1390414, 1329924, 467821],
        UNIQUE_PVTS_KEY : [
          5426271,   6491731,   5473906,   3031993,   2678656,   3601546,   7139433,   6935725,   6488550,   5850855,   3377374,   3211425,   6609467,   7475504,   7102703,   7411334,   6142170,   3370588,   3130827,   6613529,   7761693,   7158782,   6567265,   5809767,   3257832,   3078280,   6662284,   7228795,   7134439,   6896397,   6073196,   3291151,   3005638,   6193620,   8048410,   7463478,   6958275,   6045263,   3465006,   3236296,   6536425,   7585043,   6839696,
          6056959,   3672400,   2672362,   2680433,   6460015,   7627991,   6976989,   6603494,   5854053,   3442651,   3113473,   6718211,   7800351,   7332750,   6934720,   5986219,   3493028,   3162487,   6181108,   8246816,   7992969,   7772236,   6868765,   4241191,   3201793,   6915438,   7615815,   7387837,   7256045,   6200868,   3445055,   3205873,   6892920,   7728593,   7456841,   7057149,   6198569,   3448595,   3221636,   6805944,   7949800,   7761276,   7136545,
          5858633,   3720446,   3276318,   7023440,   7885985,   7639487,   6909406,   6215670,   3702665,   3401052,   6943817,   8141877,   7895588,   7685348,   6898414,   4064456,   3425952,   6950272,   7860393,   7410881,   7099668,   6303547,   3675901,   3004424,   4146131,   7456538,   7928638,   7430850,   6855473,   4726209,   3361427,   6672435,   8347869,   7808391,   3899065
          ],

        MU_KEY : -2.3639915875610935,
        SIGMASQ_KEY :  2.6254206352170284,
        SESSION_MU_KEY : -2.5824459137053695,
        SESSION_SIGMASQ_KEY:  2.396475080995998,
        N_KEY : 43367298,
        FCAP_KEY : [(1, 10)],
        },
      INMAIL_KEY_20 : {
        PVTS_KEY : [3087896, 5934145, 16349614, 15731892, 14915337, 12755507, 5774237, 5469680, 15534699, 18474965, 22389628, 21084727, 14034232, 5762565, 5312194, 16178603, 20990907, 16442560, 14529567, 11773870, 5570365, 5243983, 14568873, 17423596, 19267267, 18502354, 14539349, 5666239, 5185486, 17067256, 24742925, 22616127, 19607036, 15348629, 5976236, 5504550, 17251443, 19532937, 17116571, 14388571, 6353092, 4443316, 4451175, 16566608, 20977040, 18077775, 16493797, 13728388, 5832046,
          5301542, 18147162, 22227213, 22671472, 18974720, 14670279, 5985935, 5331972, 16198058, 30406614, 27954797, 23330337, 18238899, 8460606, 5406399, 18454545, 21470129, 21249901, 20881780, 15446337, 5754069, 5305984, 16370910, 20966245, 21755405, 34991546, 21506799, 5780172, 5361476, 16554128, 23563002, 24572586, 18729190, 13807427, 6621087, 5468134, 18218718, 21906302, 22366653, 19245400, 15784276, 6273312, 5676323, 18045065, 25208408, 25270066, 22348323, 19866274, 7442793,
          5712162, 17269934, 21969238, 22207633, 19484683, 17900263, 6440809, 4929971, 7675099, 19093483, 26047055, 23467353, 22285550, 11403307, 5587715, 17044673, 26510063, 24836204, 24861646, 23023783, 13380466, 8792674, 2030225],

        CAPPED_PVTS_KEY : [
          91642, 212331, 592307, 495735, 437666, 350491, 173064, 156322, 438282, 566910, 529409, 505363, 356720, 166050, 141244, 399787, 598572, 472007, 400716, 317928, 153177, 137480, 413034, 597301, 522599, 469095, 360288, 162082, 137712, 387826, 671952, 567570, 482126, 366552, 175688, 161397, 443398, 621587, 495003, 405496, 211970, 131436, 129206, 455330, 667356, 541968, 477338, 380303, 246935, 177344, 529037, 732356, 639388, 542178, 402197, 201235, 178808, 464407, 870549,
          757768, 634359, 488828, 246827, 188154, 611330, 789021, 684830, 636004, 468928, 216806, 195903, 611947, 837597, 762492, 892452, 586065, 236988, 212017, 656306, 1006205, 929685, 743303, 517978, 275400, 240669, 785506, 1052131, 983317, 781156, 618238, 298141, 278263, 849975, 1211467, 1132447, 1127844, 932331, 392225, 329505, 964209, 1267784, 1157156, 1034369, 854032, 378326, 313491, 567364, 1506828, 1579601, 1356329, 1203183, 658497, 454918, 1297446, 2173254, 1944027,
          1857975, 1708508, 993029, 858689, 301422],
        UNIQUE_PVTS_KEY : [
          5426271,   6491731,   5473906,   3031993,   2678656,   3601546,   7139433,   6935725,   6488550,   5850855,   3377374,   3211425,   6609467,   7475504,   7102703,   7411334,   6142170,   3370588,   3130827,   6613529,   7761693,   7158782,   6567265,   5809767,   3257832,   3078280,   6662284,   7228795,   7134439,   6896397,   6073196,   3291151,   3005638,   6193620,   8048410,   7463478,   6958275,   6045263,   3465006,   3236296,   6536425,   7585043,   6839696,
          6056959,   3672400,   2672362,   2680433,   6460015,   7627991,   6976989,   6603494,   5854053,   3442651,   3113473,   6718211,   7800351,   7332750,   6934720,   5986219,   3493028,   3162487,   6181108,   8246816,   7992969,   7772236,   6868765,   4241191,   3201793,   6915438,   7615815,   7387837,   7256045,   6200868,   3445055,   3205873,   6892920,   7728593,   7456841,   7057149,   6198569,   3448595,   3221636,   6805944,   7949800,   7761276,   7136545,
          5858633,   3720446,   3276318,   7023440,   7885985,   7639487,   6909406,   6215670,   3702665,   3401052,   6943817,   8141877,   7895588,   7685348,   6898414,   4064456,   3425952,   6950272,   7860393,   7410881,   7099668,   6303547,   3675901,   3004424,   4146131,   7456538,   7928638,   7430850,   6855473,   4726209,   3361427,   6672435,   8347869,   7808391,   3899065
          ],

        MU_KEY : -2.3639915875610935,
        SIGMASQ_KEY :  2.6254206352170284,
        SESSION_MU_KEY : -2.5824459137053695,
        SESSION_SIGMASQ_KEY:  2.396475080995998,
        N_KEY : 43367298,
        FCAP_KEY : [(1, 20)],
        },
      INMAIL_KEY_30 : {
        PVTS_KEY : [3087896, 5934145, 16349614, 15731892, 14915337, 12755507, 5774237, 5469680, 15534699, 18474965, 22389628, 21084727, 14034232, 5762565, 5312194, 16178603, 20990907, 16442560, 14529567, 11773870, 5570365, 5243983, 14568873, 17423596, 19267267, 18502354, 14539349, 5666239, 5185486, 17067256, 24742925, 22616127, 19607036, 15348629, 5976236, 5504550, 17251443, 19532937, 17116571, 14388571, 6353092, 4443316, 4451175, 16566608, 20977040, 18077775, 16493797, 13728388, 5832046,
          5301542, 18147162, 22227213, 22671472, 18974720, 14670279, 5985935, 5331972, 16198058, 30406614, 27954797, 23330337, 18238899, 8460606, 5406399, 18454545, 21470129, 21249901, 20881780, 15446337, 5754069, 5305984, 16370910, 20966245, 21755405, 34991546, 21506799, 5780172, 5361476, 16554128, 23563002, 24572586, 18729190, 13807427, 6621087, 5468134, 18218718, 21906302, 22366653, 19245400, 15784276, 6273312, 5676323, 18045065, 25208408, 25270066, 22348323, 19866274, 7442793,
          5712162, 17269934, 21969238, 22207633, 19484683, 17900263, 6440809, 4929971, 7675099, 19093483, 26047055, 23467353, 22285550, 11403307, 5587715, 17044673, 26510063, 24836204, 24861646, 23023783, 13380466, 8792674, 2030225],

        CAPPED_PVTS_KEY : [
          91811, 212048, 590290, 494838, 438818, 349781, 172879, 156461, 436808, 567371, 529520, 507971, 355993, 166256, 141177, 400151, 598500, 472406, 400384, 318336, 153641, 136326, 405501, 582682, 502766, 445394, 340061, 152037, 127229, 355288, 610382, 512561, 433004, 332160, 161536, 148450, 404661, 563181, 449146, 367808, 194510, 121381, 120391, 423555, 613796, 496580, 437659, 353674, 234760, 167786, 491380, 672613, 583817, 496945, 371358, 187223, 167401, 428975, 798334,
          694011, 583513, 454907, 232012, 176611, 571106, 727824, 629222, 585216, 435659, 201489, 181878, 561400, 758483, 687359, 806561, 532539, 216399, 194847, 594992, 899025, 822580, 657474, 462757, 249023, 218924, 701844, 929127, 860326, 687774, 553032, 270446, 253934, 766702, 1074071, 992379, 995827, 831258, 351849, 296544, 850588, 1087411, 983489, 881057, 740067, 334009, 282517, 498822, 1293728, 1340742, 1155342, 1044824, 581836, 400385, 1106949, 1808523, 1571742, 1493873,
          1411730, 850697, 743430, 246113],
        UNIQUE_PVTS_KEY : [
          5426271,   6491731,   5473906,   3031993,   2678656,   3601546,   7139433,   6935725,   6488550,   5850855,   3377374,   3211425,   6609467,   7475504,   7102703,   7411334,   6142170,   3370588,   3130827,   6613529,   7761693,   7158782,   6567265,   5809767,   3257832,   3078280,   6662284,   7228795,   7134439,   6896397,   6073196,   3291151,   3005638,   6193620,   8048410,   7463478,   6958275,   6045263,   3465006,   3236296,   6536425,   7585043,   6839696,
          6056959,   3672400,   2672362,   2680433,   6460015,   7627991,   6976989,   6603494,   5854053,   3442651,   3113473,   6718211,   7800351,   7332750,   6934720,   5986219,   3493028,   3162487,   6181108,   8246816,   7992969,   7772236,   6868765,   4241191,   3201793,   6915438,   7615815,   7387837,   7256045,   6200868,   3445055,   3205873,   6892920,   7728593,   7456841,   7057149,   6198569,   3448595,   3221636,   6805944,   7949800,   7761276,   7136545,
          5858633,   3720446,   3276318,   7023440,   7885985,   7639487,   6909406,   6215670,   3702665,   3401052,   6943817,   8141877,   7895588,   7685348,   6898414,   4064456,   3425952,   6950272,   7860393,   7410881,   7099668,   6303547,   3675901,   3004424,   4146131,   7456538,   7928638,   7430850,   6855473,   4726209,   3361427,   6672435,   8347869,   7808391,   3899065
          ],

        MU_KEY : -2.3639915875610935,
        SIGMASQ_KEY :  2.6254206352170284,
        SESSION_MU_KEY : -2.5824459137053695,
        SESSION_SIGMASQ_KEY:  2.396475080995998,
        N_KEY : 43367298,
        FCAP_KEY : [(1, 30)],
        },
      INMAIL_KEY_40 : {
        PVTS_KEY : [3087896, 5934145, 16349614, 15731892, 14915337, 12755507, 5774237, 5469680, 15534699, 18474965, 22389628, 21084727, 14034232, 5762565, 5312194, 16178603, 20990907, 16442560, 14529567, 11773870, 5570365, 5243983, 14568873, 17423596, 19267267, 18502354, 14539349, 5666239, 5185486, 17067256, 24742925, 22616127, 19607036, 15348629, 5976236, 5504550, 17251443, 19532937, 17116571, 14388571, 6353092, 4443316, 4451175, 16566608, 20977040, 18077775, 16493797, 13728388, 5832046,
          5301542, 18147162, 22227213, 22671472, 18974720, 14670279, 5985935, 5331972, 16198058, 30406614, 27954797, 23330337, 18238899, 8460606, 5406399, 18454545, 21470129, 21249901, 20881780, 15446337, 5754069, 5305984, 16370910, 20966245, 21755405, 34991546, 21506799, 5780172, 5361476, 16554128, 23563002, 24572586, 18729190, 13807427, 6621087, 5468134, 18218718, 21906302, 22366653, 19245400, 15784276, 6273312, 5676323, 18045065, 25208408, 25270066, 22348323, 19866274, 7442793,
          5712162, 17269934, 21969238, 22207633, 19484683, 17900263, 6440809, 4929971, 7675099, 19093483, 26047055, 23467353, 22285550, 11403307, 5587715, 17044673, 26510063, 24836204, 24861646, 23023783, 13380466, 8792674, 2030225],

        CAPPED_PVTS_KEY : [
          92027, 210988, 590297, 495185, 438865, 350715, 172852, 156222, 438052, 566044, 530481, 507254, 355783, 166783, 140783, 398887, 597449, 471871, 400609, 318441, 153578, 136174, 405594, 583743, 503190, 444577, 339478, 151257, 127413, 356647, 610141, 510081, 425540, 322118, 154066, 140405, 380624, 528819, 417717, 336479, 175801, 109486, 108615, 382528, 564496, 458170, 399289, 319534, 213053, 151622, 452065, 627944, 549128, 461819, 342411, 172140, 153892, 399552, 750099,
          656284, 544915, 419307, 213117, 162773, 529420, 684152, 593589, 546511, 401865, 186046, 168199, 527758, 724442, 658416, 764245, 499117, 202171, 181702, 559732, 852979, 778577, 611598, 422464, 227350, 199096, 642213, 863009, 803852, 628632, 494423, 242078, 228018, 689885, 983937, 910672, 899545, 738545, 309303, 263229, 762858, 995580, 907853, 798296, 654082, 293199, 244779, 438071, 1173996, 1222159, 1022934, 896056, 490874, 341097, 964681, 1633335, 1454621, 1325755,
          1179631, 691827, 616907, 209726],
        UNIQUE_PVTS_KEY : [
          5426271,   6491731,   5473906,   3031993,   2678656,   3601546,   7139433,   6935725,   6488550,   5850855,   3377374,   3211425,   6609467,   7475504,   7102703,   7411334,   6142170,   3370588,   3130827,   6613529,   7761693,   7158782,   6567265,   5809767,   3257832,   3078280,   6662284,   7228795,   7134439,   6896397,   6073196,   3291151,   3005638,   6193620,   8048410,   7463478,   6958275,   6045263,   3465006,   3236296,   6536425,   7585043,   6839696,
          6056959,   3672400,   2672362,   2680433,   6460015,   7627991,   6976989,   6603494,   5854053,   3442651,   3113473,   6718211,   7800351,   7332750,   6934720,   5986219,   3493028,   3162487,   6181108,   8246816,   7992969,   7772236,   6868765,   4241191,   3201793,   6915438,   7615815,   7387837,   7256045,   6200868,   3445055,   3205873,   6892920,   7728593,   7456841,   7057149,   6198569,   3448595,   3221636,   6805944,   7949800,   7761276,   7136545,
          5858633,   3720446,   3276318,   7023440,   7885985,   7639487,   6909406,   6215670,   3702665,   3401052,   6943817,   8141877,   7895588,   7685348,   6898414,   4064456,   3425952,   6950272,   7860393,   7410881,   7099668,   6303547,   3675901,   3004424,   4146131,   7456538,   7928638,   7430850,   6855473,   4726209,   3361427,   6672435,   8347869,   7808391,   3899065
          ],

        MU_KEY : -2.3639915875610935,
        SIGMASQ_KEY :  2.6254206352170284,
        SESSION_MU_KEY : -2.5824459137053695,
        SESSION_SIGMASQ_KEY:  2.396475080995998,
        N_KEY : 43367298,
        FCAP_KEY : [(1, 40)],
        },
      INMAIL_KEY_50 : {
        PVTS_KEY : [3087896, 5934145, 16349614, 15731892, 14915337, 12755507, 5774237, 5469680, 15534699, 18474965, 22389628, 21084727, 14034232, 5762565, 5312194, 16178603, 20990907, 16442560, 14529567, 11773870, 5570365, 5243983, 14568873, 17423596, 19267267, 18502354, 14539349, 5666239, 5185486, 17067256, 24742925, 22616127, 19607036, 15348629, 5976236, 5504550, 17251443, 19532937, 17116571, 14388571, 6353092, 4443316, 4451175, 16566608, 20977040, 18077775, 16493797, 13728388, 5832046,
          5301542, 18147162, 22227213, 22671472, 18974720, 14670279, 5985935, 5331972, 16198058, 30406614, 27954797, 23330337, 18238899, 8460606, 5406399, 18454545, 21470129, 21249901, 20881780, 15446337, 5754069, 5305984, 16370910, 20966245, 21755405, 34991546, 21506799, 5780172, 5361476, 16554128, 23563002, 24572586, 18729190, 13807427, 6621087, 5468134, 18218718, 21906302, 22366653, 19245400, 15784276, 6273312, 5676323, 18045065, 25208408, 25270066, 22348323, 19866274, 7442793,
          5712162, 17269934, 21969238, 22207633, 19484683, 17900263, 6440809, 4929971, 7675099, 19093483, 26047055, 23467353, 22285550, 11403307, 5587715, 17044673, 26510063, 24836204, 24861646, 23023783, 13380466, 8792674, 2030225],

        CAPPED_PVTS_KEY : [
          91515, 212463, 591245, 495710, 438990, 350463, 172871, 156542, 437513, 565327, 530170, 507270, 356230, 166723, 141150, 399798, 597942, 472521, 400205, 318933, 153951, 136080, 404924, 583508, 502883, 444783, 340250, 151641, 127643, 355941, 609864, 508386, 426757, 321808, 153909, 140010, 379605, 528202, 417136, 336956, 174923, 108203, 106288, 369927, 541532, 434548, 375350, 298921, 200477, 139459, 407443, 562586, 491934, 417081, 311033, 157799, 140381, 359019, 677796,
          597929, 501248, 389798, 199669, 151200, 485161, 625918, 547357, 508344, 375556, 174838, 157492, 485307, 662926, 606151, 710396, 468421, 191003, 170202, 519289, 791051, 728072, 581223, 407730, 218786, 190611, 606522, 812472, 760626, 600517, 476131, 232404, 215372, 639222, 906676, 844877, 842525, 695745, 293002, 244705, 688973, 893570, 817100, 728445, 600754, 270836, 223614, 388264, 1034914, 1086303, 926357, 829928, 459052, 312478, 852870, 1428032, 1259129, 1178516,
          1086901, 644497, 535920, 170776],
        UNIQUE_PVTS_KEY : [
          5426271,   6491731,   5473906,   3031993,   2678656,   3601546,   7139433,   6935725,   6488550,   5850855,   3377374,   3211425,   6609467,   7475504,   7102703,   7411334,   6142170,   3370588,   3130827,   6613529,   7761693,   7158782,   6567265,   5809767,   3257832,   3078280,   6662284,   7228795,   7134439,   6896397,   6073196,   3291151,   3005638,   6193620,   8048410,   7463478,   6958275,   6045263,   3465006,   3236296,   6536425,   7585043,   6839696,
          6056959,   3672400,   2672362,   2680433,   6460015,   7627991,   6976989,   6603494,   5854053,   3442651,   3113473,   6718211,   7800351,   7332750,   6934720,   5986219,   3493028,   3162487,   6181108,   8246816,   7992969,   7772236,   6868765,   4241191,   3201793,   6915438,   7615815,   7387837,   7256045,   6200868,   3445055,   3205873,   6892920,   7728593,   7456841,   7057149,   6198569,   3448595,   3221636,   6805944,   7949800,   7761276,   7136545,
          5858633,   3720446,   3276318,   7023440,   7885985,   7639487,   6909406,   6215670,   3702665,   3401052,   6943817,   8141877,   7895588,   7685348,   6898414,   4064456,   3425952,   6950272,   7860393,   7410881,   7099668,   6303547,   3675901,   3004424,   4146131,   7456538,   7928638,   7430850,   6855473,   4726209,   3361427,   6672435,   8347869,   7808391,   3899065
          ],

        MU_KEY : -2.3639915875610935,
        SIGMASQ_KEY :  2.6254206352170284,
        SESSION_MU_KEY : -2.5824459137053695,
        SESSION_SIGMASQ_KEY:  2.396475080995998,
        N_KEY : 43367298,
        FCAP_KEY : [(1, 50)],
        },
      INMAIL_KEY_60 : {
        PVTS_KEY : [3087896, 5934145, 16349614, 15731892, 14915337, 12755507, 5774237, 5469680, 15534699, 18474965, 22389628, 21084727, 14034232, 5762565, 5312194, 16178603, 20990907, 16442560, 14529567, 11773870, 5570365, 5243983, 14568873, 17423596, 19267267, 18502354, 14539349, 5666239, 5185486, 17067256, 24742925, 22616127, 19607036, 15348629, 5976236, 5504550, 17251443, 19532937, 17116571, 14388571, 6353092, 4443316, 4451175, 16566608, 20977040, 18077775, 16493797, 13728388, 5832046,
          5301542, 18147162, 22227213, 22671472, 18974720, 14670279, 5985935, 5331972, 16198058, 30406614, 27954797, 23330337, 18238899, 8460606, 5406399, 18454545, 21470129, 21249901, 20881780, 15446337, 5754069, 5305984, 16370910, 20966245, 21755405, 34991546, 21506799, 5780172, 5361476, 16554128, 23563002, 24572586, 18729190, 13807427, 6621087, 5468134, 18218718, 21906302, 22366653, 19245400, 15784276, 6273312, 5676323, 18045065, 25208408, 25270066, 22348323, 19866274, 7442793,
          5712162, 17269934, 21969238, 22207633, 19484683, 17900263, 6440809, 4929971, 7675099, 19093483, 26047055, 23467353, 22285550, 11403307, 5587715, 17044673, 26510063, 24836204, 24861646, 23023783, 13380466, 8792674, 2030225],

        CAPPED_PVTS_KEY : [
          91604, 211934, 591702, 494364, 438514, 351045, 172491, 156858, 437847, 566331, 530217, 505836, 356242, 166285, 141578, 399987, 595874, 471873, 400825, 318079, 153432, 136384, 405108, 583705, 502425, 445850, 339491, 152350, 127725, 356241, 609554, 508214, 427306, 320931, 153697, 139909, 380388, 528562, 418274, 336657, 175406, 108361, 105476, 368792, 542380, 434102, 375206, 299546, 200522, 139820, 406558, 560311, 484698, 403538, 297173, 149333, 130762, 334811, 631147,
          548678, 450242, 345445, 177408, 135328, 439746, 574167, 496017, 454962, 334928, 156892, 142689, 448088, 617603, 560957, 650413, 425350, 174476, 156433, 484146, 742405, 678332, 531018, 369386, 200016, 176297, 566807, 767728, 712506, 555234, 437192, 215605, 203172, 615266, 876785, 808420, 794695, 653054, 277158, 233727, 666566, 861698, 773992, 676927, 553485, 252597, 209889, 370300, 992169, 1022845, 850490, 744656, 414292, 289022, 802171, 1349442, 1158965, 1041012,
          930672, 565540, 496068, 163380],
        UNIQUE_PVTS_KEY : [
          5426271,   6491731,   5473906,   3031993,   2678656,   3601546,   7139433,   6935725,   6488550,   5850855,   3377374,   3211425,   6609467,   7475504,   7102703,   7411334,   6142170,   3370588,   3130827,   6613529,   7761693,   7158782,   6567265,   5809767,   3257832,   3078280,   6662284,   7228795,   7134439,   6896397,   6073196,   3291151,   3005638,   6193620,   8048410,   7463478,   6958275,   6045263,   3465006,   3236296,   6536425,   7585043,   6839696,
          6056959,   3672400,   2672362,   2680433,   6460015,   7627991,   6976989,   6603494,   5854053,   3442651,   3113473,   6718211,   7800351,   7332750,   6934720,   5986219,   3493028,   3162487,   6181108,   8246816,   7992969,   7772236,   6868765,   4241191,   3201793,   6915438,   7615815,   7387837,   7256045,   6200868,   3445055,   3205873,   6892920,   7728593,   7456841,   7057149,   6198569,   3448595,   3221636,   6805944,   7949800,   7761276,   7136545,
          5858633,   3720446,   3276318,   7023440,   7885985,   7639487,   6909406,   6215670,   3702665,   3401052,   6943817,   8141877,   7895588,   7685348,   6898414,   4064456,   3425952,   6950272,   7860393,   7410881,   7099668,   6303547,   3675901,   3004424,   4146131,   7456538,   7928638,   7430850,   6855473,   4726209,   3361427,   6672435,   8347869,   7808391,   3899065
          ],

        MU_KEY : -2.3639915875610935,
        SIGMASQ_KEY :  2.6254206352170284,
        SESSION_MU_KEY : -2.5824459137053695,
        SESSION_SIGMASQ_KEY:  2.396475080995998,
        N_KEY : 43367298,
        FCAP_KEY : [(1, 60)],
        },
      }

def FcapSim():
  dataKey = options.data
  data = getData()[dataKey]

  memberSize = data[N_KEY]
  FC = data[FCAP_KEY]

  PVTS = data[PVTS_KEY]
  if options.length > 0:
    PVTS = PVTS[:options.length]
  dprint( "Time serial:", PVTS)

  TsLen = len(PVTS)

  suplyTsByFullSim = data[CAPPED_PVTS_KEY]
  if options.length > 0:
    suplyTsByFullSim = suplyTsByFullSim[:options.length]

  assert len(PVTS) == len(suplyTsByFullSim)

  Tn = GRANULARITY_SIZE * TsLen

  mu, sigma =  data[MU_KEY], math.sqrt(data[SIGMASQ_KEY])

  if options.session:
    mu, sigma = data[SESSION_MU_KEY], math.sqrt(data[SESSION_SIGMASQ_KEY])

  dprint( "Mu:", mu)
  dprint( "Sigma: ", sigma)
  dprint( "Avg lambda:", math.pow(math.e, mu))

  SAMPLE_TIME = options.time
  dprint( 'SAMPLE TIME:', SAMPLE_TIME)

  seqAll = []
  cappedSeqAll = []

  for i in xrange(SAMPLE_TIME):
    lambdaTs = []
    if options.drawMethod == 'linear':
      lamb = drawLambda(mu, sigma)
      lambTs = restoreLambdaTsFromPvTs(PVTS, lamb)
    elif options.drawMethod == 'equal':
      lamb = drawLambda(mu, sigma)
      lambTs = [lamb] * len(PVTS)

    if options.drawMethod == 'equal':
      seq = generateSeq(lamb, Tn)
    else:
      seq = generateDeltaTimeWithinPeriod(lambTs, Tn, options.even)

    #seq = seq[1:]
    seqAll += seq

    cappedSeq = applyFcapToSeq(seq, FC)
    cappedSeqAll += cappedSeq

    #cappedTs = bucketSeqToTs(cappedSeq, TsLen)
    if (i == 0):
      dprint( 'LambdaTs :', lambTs)
      dprint( 'Seq:', seq)
      dprint( 'Capped Seq:', cappedSeq)

  ##############

  cappedTsAll = bucketSeqToTs(cappedSeqAll, TsLen)
  dprint( 'Capped Ts all', cappedTsAll)
  simTsAll = bucketSeqToTs(seqAll, TsLen)
  dprint( 'SimTs all', simTsAll)


  sumOrignalTs = sum(PVTS)
  sumSimTsAll = 1.0 * sum(simTsAll) * memberSize / SAMPLE_TIME


  simRatio = math.sqrt(1.0 * sumOrignalTs / sumSimTsAll)
  dprint( 'SimRatio:', simRatio, sumOrignalTs, sumSimTsAll)

  supplyTs = []
  if options.restoreMethod == 'scale':
    supplyTs = [ int(math.floor(x)) for x in listMultiply(cappedTsAll, 1.0*memberSize/SAMPLE_TIME)]
  elif options.restoreMethod == 'factor':
    dailyAvgImpr = 1.0 * sum(simTsAll) / TsLen
    dprint( 'Daily Avg Imprresion', dailyAvgImpr)
    discountFactors = vectorDivide(cappedTsAll, [dailyAvgImpr] * TsLen)
    dprint( 'Daily Factors', discountFactors)
    supplyTs = [ int(math.floor(x)) for x in vectorMultiply(PVTS, discountFactors)]

  # Print total supply Ts
  dprint( 'supplyTs:', supplyTs, 'Total:', sum(supplyTs))

  dprint ('suplyTsByFullSim:', suplyTsByFullSim, 'Total', sum(suplyTsByFullSim))

  sumSupplyTs = sum(supplyTs)
  sumSuplyTsByFullSim = sum(suplyTsByFullSim)
  # Calibration
  sumSuplyTsByFullSim = sumSuplyTsByFullSim * simRatio

  assert len(supplyTs) == len(suplyTsByFullSim)

  SAMPE = 1.0 * abs(sumSuplyTsByFullSim - sumSupplyTs) / (sumSuplyTsByFullSim + sumSupplyTs) *2
  dprint( 'SAMPE:', SAMPE)

  FAratio = 1.0 * sumSupplyTs / sumSuplyTsByFullSim
  dprint( 'F/A ratio:', FAratio)

  return FAratio

def main(args):
  if len(args) > 0 and args[0] == 'repeat':
    repeatSim()
  elif len(args) > 0 and args[0] == 'quick':
    quickTest()
  else:
    FcapSim()

def repeatSim():
  setattr(options, 'mute', True)

  metric = []
  for i in xrange(1000):
    mu = FcapSim()
    metric.append(mu)

  print 'O/E Mean:', scipy.mean(metric)
  print 'O/E Std:', scipy.std(metric)

def quickTest():
  setattr(options, 'data', INMAIL_KEY_10)
  FcapSim()

  setattr(options, 'data', INMAIL_KEY_20)
  FcapSim()

  setattr(options, 'data', INMAIL_KEY_30)
  FcapSim()

  setattr(options, 'data', INMAIL_KEY_40)
  FcapSim()

  setattr(options, 'data', INMAIL_KEY_50)
  FcapSim()

  setattr(options, 'data', INMAIL_KEY_60)
  FcapSim()


if __name__ == '__main__':
  from optparse import OptionParser
  parser = OptionParser()
  parser.add_option('--mute', action = 'store_true')
  parser.add_option('-d', '--data', default = INMAIL_KEY)
  parser.add_option('-t', '--time', type=int, default = 100)
  parser.add_option('-l', '--length', type=int, default = 0)
  parser.add_option('-m', '--drawMethod', default = 'equal')
  parser.add_option('-r', '--restoreMethod', default = 'factor')
  parser.add_option('-e', '--even', action='store_true')
  parser.add_option('-s', '--session', action="store_true")

  (options,args) = parser.parse_args()

  main(args)

